@page "/Excavator"
@using WynajemMaszyn.Application.Features.Excavators.Queries.DTOs
@using WynajemMaszyn.Application.Features.Excavators.Queries.GetAllExcavators;
@using MediatR
@inject IMediator Mediator

<PageTitle>Excavator</PageTitle>

<h1>Excavator</h1>

@if (excavator == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>City</th>
                <th>Capacity</th>
                <th>Built Year</th>
                <th>Pitch Length</th>
                <th>Pitch Width</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var machine in excavator)
            {
                <tr>
                    <td>@machine.Name</td>
                    <td>@machine.ProductionYear</td>
                    <td>@machine.ProductionYear</td>
                    <td>@machine.OperatingHours</td>
                    <td>@machine.Weight</td>
                    <td>@machine.Engine</td>
                    <td>@machine.EnginePower</td>
                    <td>@machine.DrivingSpeed</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<GetExcavatorDto>? excavator;
    private readonly ISender _mediator;
    protected override async Task OnInitializedAsync()
    {
       // excavator = await Mediator.Send(new GetAllExcavators());
        var response =  await _mediator.Send(new GetAllExcavators());
        excavator = response.Match(
                    WorkTaskResponse => Ok(WorkTaskResponse),
                    errors => Problem(errors));
    }
}
