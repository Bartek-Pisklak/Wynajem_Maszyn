@page "/Excavator"
@using WynajemMaszyn.Application.Features.Excavators.Queries.DTOs
@using WynajemMaszyn.WebUI.Data
@inject ExcavatorService excavatorService

<PageTitle>Excavator</PageTitle>

<h1>Excavator</h1>

@if (excavator == null)
{
    <p><em>Loading...</em></p>
}
else if (excavator.Count == 0)
{
    <p><em>No data available</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>ProductionYear</th>
                <th>OperatingHours</th>
                <th>Weight</th>
                <th>Engine</th>
                <th>EnginePower</th>
                <th>DrivingSpeed</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var machine in excavator)
            {
                <tr>
                    <td>@machine.Name</td>
                    <td>@machine.ProductionYear</td>
                    <td>@machine.OperatingHours</td>
                    <td>@machine.Weight</td>
                    <td>@machine.Engine</td>
                    <td>@machine.EnginePower</td>
                    <td>@machine.DrivingSpeed</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<GetExcavatorDto>? excavator;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            excavator = await excavatorService.GetAllExcavators();
        }
        catch (InvalidCastException ex)
        {
            Console.WriteLine($"Invalid cast exception: {ex.Message}");
            // Możesz wyświetlić użytkownikowi odpowiednią wiadomość
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Unhandled exception: {ex.Message}");
            // Możesz również wyświetlić użytkownikowi wiadomość o błędzie
        }
    }
}