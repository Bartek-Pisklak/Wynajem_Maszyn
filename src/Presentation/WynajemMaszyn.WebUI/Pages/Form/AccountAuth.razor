
@using MediatR
@using WynajemMaszyn.Application.Authentication.Commands.Register
@using WynajemMaszyn.Application.Authentication.Commands.Login
@using System.ComponentModel.DataAnnotations
@inject IMediator Mediator
@page "/AccountAuth"
<PageTitle>Authentication</PageTitle>

<div class="d-flex justify-content-center align-items-center" style="height: 100vh;">
    <div class="card p-4 shadow-lg" style="width: 400px;">
        <h3 class="text-center">@formTitle</h3>

        <EditForm Model="@formModel" OnValidSubmit="HandleSubmit">
            <DataAnnotationsValidator />

            @if (isRegistering)
            {
                <div class="form-group">
                    <label for="FirstName">First Name</label>
                    <InputText id="FirstName" class="form-control" @bind-Value="formModel.FirstName" />
                    <ValidationMessage For="@(() => formModel.FirstName)" />
                </div>

                <div class="form-group">
                    <label for="LastName">Last Name</label>
                    <InputText id="LastName" class="form-control" @bind-Value="formModel.LastName" />
                    <ValidationMessage For="@(() => formModel.LastName)" />
                </div>
            }

            <div class="form-group">
                <label for="Email">Email</label>
                <InputText id="Email" class="form-control" @bind-Value="formModel.Email" />
                <ValidationMessage For="@(() => formModel.Email)" />
            </div>

            <div class="form-group">
                <label for="Password">Password</label>
                <InputText id="Password" class="form-control" type="password" @bind-Value="formModel.Password" />
                <ValidationMessage For="@(() => formModel.Password)" />
            </div>

            @if (isRegistering)
            {
                <div class="form-group">
                    <label for="ConfirmPassword">Confirm Password</label>
                    <InputText id="ConfirmPassword" class="form-control" type="password" @bind-Value="formModel.ConfirmPassword" />
                    <ValidationMessage For="@(() => formModel.ConfirmPassword)" />
                </div>
            }

            <div class="text-center mt-4">
                <button type="submit" class="btn btn-primary w-100">@submitButtonText</button>
            </div>
        </EditForm>

        <div class="text-center mt-3">
            <button class="btn btn-secondary w-100" @onclick="ToggleForm">@toggleButtonText</button>
        </div>
    </div>
</div>

@code {
    private bool isRegistering = false;
    private string formTitle => isRegistering ? "Register" : "Login";
    private string submitButtonText => isRegistering ? "Register" : "Login";
    private string toggleButtonText => isRegistering ? "Already have an account? Log in" : "Don't have an account? Register";

    private AuthFormModel formModel = new();

    private void ToggleForm()
    {
        isRegistering = !isRegistering;
        formModel = new(); // Reset the form
    }

    private async Task HandleSubmit()
    {
        // Handle form submission (e.g., send data to API)
        if (isRegistering)
        {
            var command = new RegisterCommand(
            formModel.FirstName,
            formModel.LastName,
            formModel.Email,
            formModel.Password,
            formModel.ConfirmPassword
            );
            await Mediator.Send(command);
            Console.WriteLine("Registering user");
        }
        else
        {
            var command = new LoginCommand(
            formModel.Email,
            formModel.Password
            );
            await Mediator.Send(command);
            Console.WriteLine("Logging in user");
        }
    }

    public class AuthFormModel
    {
        // Fields for both login and registration
        public string FirstName { get; set; }
        public string LastName { get; set; }

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; }

        [Compare(nameof(Password), ErrorMessage = "Passwords do not match")]
        public string ConfirmPassword { get; set; }
    }
}
