@page "/Account/Register"

@using MediatR
@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using WynajemMaszyn.Application.Authentication.Commands.Register
@using WynajemMaszyn.Application.Persistance.Auth

@inject IMediator Mediator

@inject IUserManagerService UserManager 
@inject ISignInManagerService SignInManager

@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager



<h1>Rejestracja</h1>

<div class="row">
    <div class="col-md-4">
        <StatusMessage Message="@Message" />
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
            <DataAnnotationsValidator />
            <h2>Stwórz nowe konto.</h2>
            <hr />

            @if (Errors.Any())
            {
                <ul>
                    @foreach (var error in Errors)
                    {
                        <li class="text-danger">@error</li>
                    }
                </ul>
            }

            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.FirstName" class="form-control" autocomplete="imie" aria-required="true" placeholder="John" />
                <label for="FirstName">Imię</label>
                <ValidationMessage For="() => Input.FirstName" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.LastName" class="form-control" autocomplete="nazwisko" aria-required="true" placeholder="Wick" />
                <label for="LastName">Nazwisko</label>
                <ValidationMessage For="() => Input.LastName" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label for="email">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="password">Password</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="confirm-password">Confirm Password</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
        </EditForm>
    </div>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; } = "/";

    private List<string> Errors = new();

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        ReturnUrl = NavigationManager.BaseUri;

        var command = new RegisterCommand(
        Input.FirstName,
        Input.LastName,
        Input.Email,
        Input.Password,
        Input.ConfirmPassword,
        ReturnUrl
        );

        try
        {
            var response = await Mediator.Send(command);

            var userResponse = response.Match(
                success =>
                {
                    Console.WriteLine("User registered successfully!");
                    return success;
                },
                errors =>
                {
                    // Obsługa błędów - logowanie i przekazanie do listy błędów
                    foreach (var error in errors)
                    {
                        Console.WriteLine($"Error: {error.Description} (Code: {error.Code})");
                    }
                    Errors = errors.Select(e => e.Description).ToList();

                    // Opcjonalnie możesz rzucić wyjątek lub po prostu zwrócić wartość
                    throw new Exception("User registration failed.");
                }
            );


            RedirectManager.RedirectTo(ReturnUrl);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception occurred: {ex.Message}");
        }


    }


    private sealed class InputModel
    {
        [Required]
        [Display(Name = "FirstName")]
        public string FirstName { get; set; } = "";

        [Required]
        [Display(Name = "LastName")]
        public string LastName { get; set; } = "";

        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
