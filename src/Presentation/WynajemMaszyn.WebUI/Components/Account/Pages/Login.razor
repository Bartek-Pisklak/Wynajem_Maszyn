@page "/Account/Login"

@using MediatR
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using WynajemMaszyn.Application.Authentication.Commands.Login
@using WynajemMaszyn.Application.Contracts.Authentication
@using WynajemMaszyn.Application.Persistance.Auth


@inject IMediator Mediator
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager


<h1>Logowanie</h1>
<div class="row">
    <div class="col-md-4">
        <section>
            <StatusMessage Message="@errorMessage" />
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                
                <DataAnnotationsValidator />

                <h2>Zaloguj się!</h2>
                <hr />
                @if (Errors != null && Errors.Count > 0)
                {
                    <ul class="text-danger">
                        @foreach (var error in Errors)
                        {
                            <li>@error</li>
                        }
                    </ul>
                }

                <ValidationSummary class="text-danger" role="alert" />
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                    <label for="email" class="form-label">Email</label>
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                    <label for="password" class="form-label">Hasło</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>
                <div class="checkbox mb-3">
                    <label class="form-label">
                        <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
                        Zapamiętaj mnie
                    </label>
                </div>
                <div>
                    <button type="submit" class="w-100 btn btn-lg btn-primary">Zaloguj</button>
                </div>

                <div>
                    <p>
                        <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</a>
                    </p>
                    <p>
                        <a href="Account/ForgotPassword">Przypomij Hasło?</a>
                    </p>
                    <p>
                        <a href="Account/ResendEmailConfirmation">Wyślij mail potwierdzający</a>
                    </p>
                </div>
            </EditForm>

        </section>
    </div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? ErrorMessage;
    private List<string> Errors = new();

    protected override async Task OnInitializedAsync()
    {

        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        ReturnUrl = NavigationManager.BaseUri;
        var command = new LoginCommand(
           Input.Email,
           Input.Password,
           Input.RememberMe,
           ReturnUrl);

        try
        {
            var response = await Mediator.Send(command);

            var userResponse = response.Match<LoginResponse>(
                success =>
                {
                    Console.WriteLine("User logged in successfully!");
                    return success; 
                },
                errors =>
                {
                    // Obsługa błędów
                    foreach (var error in errors)
                    {
                        Console.WriteLine($"Error: {error.Description} (Code: {error.Code})");
                    }
                    Errors = errors.Select(e => e.Description).ToList();

                    // Rzucamy wyjątek w przypadku błędów
                    throw new Exception("User login failed.");
                }
            );

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception occurred: {ex.Message}");
        }

        if (Errors.Count == 0)
        {
            NavigationManager.NavigateTo(ReturnUrl, forceLoad: true);
        }

    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }

}
