@page "/Account/Register"

@using MediatR
@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using WynajemMaszyn.Application.Authentication.Commands.Register
@using WynajemMaszyn.Application.Persistance.Auth
@using WynajemMaszyn.Domain.Entities
@using WynajemMaszyn.Infrastructure.Authentication;

@inject IMediator Mediator

@* @inject IUserManagerService UserManager 
    @inject ISignInManagerService SignInManager
*@
@inject UserManager<User> UserManager
@inject SignInManager<User> SignInManager


@inject IUserStore<User> UserStore
@inject IEmailSender<User> EmailSender

@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register</PageTitle>

<h1>Register</h1>

<div class="row">
    <div class="col-md-4">
        <StatusMessage Message="@Message" />
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
            <DataAnnotationsValidator />
            <h2>Stwórz nowe konto.</h2>
            <hr />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.FirstName" class="form-control" autocomplete="imie" aria-required="true" placeholder="John" />
                <label for="FirstName">Imię</label>
                <ValidationMessage For="() => Input.FirstName" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.LastName" class="form-control" autocomplete="nazwisko" aria-required="true" placeholder="Wick" />
                <label for="LastName">Nazwisko</label>
                <ValidationMessage For="() => Input.LastName" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label for="email">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="password">Password</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="confirm-password">Confirm Password</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
        </EditForm>
    </div>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
            /*var command = new RegisterCommand(
              Input.FirstName,
        Input.LastName,
        Input.Email,
            Input.Password,
        Input.ConfirmPassword
        );
            var response = await Mediator.Send(command);

            var userRes = response.Match(
            UserResponse =>
        {
        return UserResponse;
        },
        errors =>
        {
        foreach (var error in errors)
        {
        Console.WriteLine($"Error: {error.Description} (Code: {error.Code})");
            }

            throw new Exception("Failed to retrieve User.");
        });
        if (!userRes.Succeeded)
        {
        identityErrors = userRes.identityErrors;
        return;
        }

        Logger.LogInformation("User created a new account with password.");


        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
        NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
        new Dictionary<string, object?> { ["userId"] = userRes.userId, ["code"] = userRes.code, ["returnUrl"] = ReturnUrl });


        //await EmailSender.SendConfirmationLinkAsync(userRes.user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));


        if (!userRes.RequireConfirmedAccount)
            {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
         }

         */

        var user = CreateUser();



        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        //var emailStore = GetEmailStore();
        // await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);

        user.FirstName = Input.FirstName;
        user.LastName = Input.LastName;
        user.Email = Input.Email;
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }





    private User CreateUser()
    {
        try
        {
            return Activator.CreateInstance<User>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(User)}'. " +
                $"Ensure that '{nameof(User)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<User> GetEmailStore()
    {
        if (UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<User>)UserStore;
    }


    private sealed class InputModel
    {
        [Required]
        [Display(Name = "FirstName")]
        public string FirstName { get; set; } = "";

        [Required]
        [Display(Name = "LastName")]
        public string LastName { get; set; } = "";

        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
